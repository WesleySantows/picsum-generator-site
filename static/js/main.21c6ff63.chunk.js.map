{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Generator","useState","width","setWidth","height","setHeight","loading","setLoading","urlImage","setUrlImage","error","setError","submitValue","a","fetch","response","url","className","id","type","onChange","e","target","value","placeholder","required","onClick","role","download","xmlns","viewBox","d","onLoad","src","alt","rel","href","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wDC0ESC,MAxFf,WAAsB,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAESF,mBAAS,IAFlB,mBAEZG,EAFY,KAEJC,EAFI,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIaN,mBAAS,IAJtB,mBAIZO,EAJY,KAIFC,EAJE,OAKOR,mBAAS,IALhB,mBAKZS,EALY,KAKLC,EALK,KAObC,EAAW,uCAAG,4BAAAC,EAAA,0DACdX,IAASE,EADK,uBAEhBO,GAAS,GACTJ,GAAW,GAHK,SAIOO,MAAM,yBAAD,OAA0BZ,EAA1B,YAAmCE,IAJ/C,OAIVW,EAJU,OAKhBN,EAAYM,EAASC,KALL,uBAOhBL,GAAS,GAPO,4CAAH,qDAWjB,OACE,oCACE,yBAAKM,UAAU,wBACb,wBAAIA,UAAU,SAAd,qBAGF,yBAAKA,UAAU,sBACb,yBAAKA,UAAWT,EAAW,SAAW,GAAIU,GAAG,eAC3C,2BACED,UAAWP,EAAQ,QAAU,gBAC7BS,KAAK,GACLD,GAAG,QACHE,SAAU,SAACC,GAAD,OAAOlB,EAASkB,EAAEC,OAAOC,QACnCC,YAAY,QACZC,UAAQ,IAEV,2BACEN,KAAK,GACLD,GAAG,SACHD,UAAWP,EAAQ,QAAU,gBAC7BU,SAAU,SAACC,GAAD,OAAOhB,EAAUgB,EAAEC,OAAOC,QACpCC,YAAY,SACZC,UAAQ,IAEV,2BACEN,KAAK,SACLO,QAASd,EACTM,GAAG,SACHD,UAAU,qBACVM,MAAOf,EAAW,aAAe,oBAGlCF,GACC,yBAAKY,GAAG,WACN,yBAAKD,UAAU,mBACb,yBAAKA,UAAU,iBAAiBU,KAAK,cAO5CnB,GACC,yBAAKS,UAAU,SAASC,GAAG,kBACzB,yBAAKD,UAAU,WAAWS,QAAS,kBAAME,IAASpB,KAChD,yBACES,UAAU,gBACVY,MAAM,6BACNC,QAAQ,uBAER,0BAAMC,EAAE,4dACR,0BAAMA,EAAE,8UAEV,yBAAKC,OAAQ,kBAAMzB,GAAW,IAAQ0B,IAAKzB,EAAU0B,IAAI,OAK9D1B,GACC,yBAAKS,UAAU,QACb,uBAAGA,UAAU,eAAeK,OAAO,SAASa,IAAI,sBAAsBC,KAAM5B,GAA5E,4BC5EZ6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.21c6ff63.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\nimport download from \"downloadjs\";\nimport \"./index.scss\";\n\nfunction Generator() {\n  const [width, setWidth] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [urlImage, setUrlImage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const submitValue = async () => {\n    if (width && height) {\n      setError(false);\n      setLoading(true);\n      const response = await fetch(`https://picsum.photos/${width}/${height}`);\n      setUrlImage(response.url);\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container fadeInDown\">\n        <h1 className=\"title\">Picsum Generator</h1>\n      </div>\n\n      <div className=\"wrapper fadeInDown\">\n        <div className={urlImage ? \"active\" : \"\"} id=\"formContent\">\n          <input\n            className={error ? \"error\" : \"fadeIn second\"}\n            type=\"\"\n            id=\"width\"\n            onChange={(e) => setWidth(e.target.value)}\n            placeholder=\"Width\"\n            required\n          />\n          <input\n            type=\"\"\n            id=\"height\"\n            className={error ? \"error\" : \"fadeIn second\"}\n            onChange={(e) => setHeight(e.target.value)}\n            placeholder=\"Height\"\n            required\n          />\n          <input\n            type=\"submit\"\n            onClick={submitValue}\n            id=\"button\"\n            className=\"fadeIn fourth unit\"\n            value={urlImage ? \"Regenerate\" : \"Generate image \"}\n          />\n\n          {loading && (\n            <div id=\"loading\">\n              <div className=\"loading-content\">\n                <div className=\"spinner-border\" role=\"status\"></div>\n              </div>\n            </div>\n          )}\n\n        </div>\n\n        {urlImage && (\n          <div className=\"active\" id=\"image-rendered\">\n            <div className=\"download\" onClick={() => download(urlImage)}>\n              <svg\n                className=\"icon-download\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 477.867 477.867\"\n              >\n                <path d=\"M409.6 153.6h-85.333c-9.426 0-17.067 7.641-17.067 17.067s7.641 17.067 17.067 17.067H409.6c9.426 0 17.067 7.641 17.067 17.067v221.867c0 9.426-7.641 17.067-17.067 17.067H68.267c-9.426 0-17.067-7.641-17.067-17.067V204.8c0-9.426 7.641-17.067 17.067-17.067H153.6c9.426 0 17.067-7.641 17.067-17.067S163.026 153.6 153.6 153.6H68.267c-28.277 0-51.2 22.923-51.2 51.2v221.867c0 28.277 22.923 51.2 51.2 51.2H409.6c28.277 0 51.2-22.923 51.2-51.2V204.8c0-28.277-22.923-51.2-51.2-51.2z\" />\n                <path d=\"M335.947 243.934c-6.614-6.387-17.099-6.387-23.712 0L256 300.134V17.067C256 7.641 248.359 0 238.933 0s-17.067 7.641-17.067 17.067v283.068l-56.201-56.201c-6.78-6.548-17.584-6.361-24.132.419-6.388 6.614-6.388 17.1 0 23.713l85.333 85.333c6.657 6.673 17.463 6.687 24.136.03l.031-.03 85.333-85.333c6.549-6.78 6.361-17.584-.419-24.132z\" />\n              </svg>\n              <img onLoad={() => setLoading(false)} src={urlImage} alt=\"\" />\n            </div>\n          </div>\n        )}\n\n        {urlImage && (\n          <div className=\"link\">\n            <a className=\"link_new-tab\" target=\"_blank\" rel=\"noopener noreferrer\" href={urlImage}>\n              Open image a new tab\n            </a>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Generator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Generator from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Generator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}